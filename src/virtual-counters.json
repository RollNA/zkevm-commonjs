{
    "constants":{
        "MCP": "257P",
        "TOTAL_STEPS": 8388608
    },
    "functions": {
        "batchProcessing": {
            "formula": "initBatchProcessing + failAssert + consolidateBlock + finishBatchProcessing",
            "inputs": ["batchL2DataLength"]
        },
        "initBatchProcessing":{
            "formula": "MCP + 100S + divArith + batchL2DataLength/136K + K",
            "inputs": ["batchL2DataLength"]
        },
        "consolidateBlock": {
            "formula": "2*MCP + 20S"
        },
        "finishBatchProcessing": {
            "formula": "MCP + 200S"
        },
        "rlpParsing": {
            "formula": "250S + 3B + addBatchHashData*21 + checkNonLeadingZeros*7 + divArith + txRLPLength/136K + txRLPLength/56P + txRLPLength/56D + addHashTx*9 + addHashTx*txDataLen/32 + addL2HashTx*8 + addL2HashTx*txDataLen/32 + addBatchHashByteByByte*txDataLen/32 + SHLarith + ecrecoverTx",
            "inputs": ["txRLPLength", "txDataLen"]
        },
        "decodeChangeL2BlockTx":{
            "formula": "20S + addBatchHashData*3"
        },
        "ecrecoverTx":{
            "formula": "1600B + 1100A + 6400S + K"
        },
        "processTx":{
            "formula": "300S + 12B + 14*MCP + 5D + isColdAddress*2 + 2A + addArith*3 + subArith + K + divArith + mulArith*4 + fillBlockInfoTreeWithTxReceipt + processContractCall",
            "inputs": ["bytecodeLength"]
        },
        "processContractCall": {
            "formula": "40S + 2B + 1P + 1D + 2*MCP + moveBalances + bytecodeLength/56P + bytecodeLength/56D + divArith",
            "inputs": ["bytecodeLength"]
        },
        "moveBalances": {
            "formula": "25S + 3B + 4*MCP"
        },
        "fillBlockInfoTreeWithTxReceipt": {
            "formula": "20S + 3*MCP"
        },
        "addArith": {
            "formula": "10S + 1B"
        },
        "subArith": {
            "formula": "10S + 1B"
        },
        "mulArith": {
            "formula": "50S + 1A + 1B"
        },
        "isColdAddress": {
            "formula": "100S + 2B + 2*MCP"
        },
        "SHLarith": {
            "formula": "100S + 4B + 2A"
        },
        "addHashTx": {
            "formula": "10S"
        },
        "addL2HashTx": {
            "formula": "10S"
        },
        "addBatchHashByteByByte": {
            "formula": "1610S + 32B"
        },
        "checkNonLeadingZeros": {
            "formula": "6S + getLenBytes",
            "inputs": ["txDataLen"]
        },
        "getLenBytes": {
            "formula": "20S + txDataLen*890S + txDataLen*89B + SHRarith*txDataLen*89",
            "inputs": ["txDataLen"]
        },
        "SHRarith": {
            "formula": "50S + 2B + 1A + divArith"
        },
        "addBatchHashData": {
            "formula": "10S"
        },
        "failAssert": {
            "formula": "2S"
        },
        "divArith": {
            "formula": "50S + 3B + 1A"
        }
    }
}